// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Location {
  id        String   @id @default(cuid())
  address   String
  city      String
  state     String
  country   String
  postalCode String
  latitude  Float
  longitude Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  properties Property[]

  @@map("locations")
}

model Manager{
  id String @id @default(cuid())
  name String
  email String @unique
  phoneNumber String @unique
  password String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  properties Property[]

  @@map("managers")
}

model Tenant{
  id String @id @default(cuid())
  name String
  email String  @unique
  phoneNumber String @unique
  password String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  leases Lease[]

  applications Apllication[]

  properties Property[] @relation("TenantProperties")
  favorites Property[] @relation("TenantFavorites")

  @@map("tenants")
}


model Property{
  id         String   @id @default(cuid())
  name        String
  description String
  pricePerMonth Float
  securityDeposit Float
  applicationFee Float
  isPetsAllowed Boolean @default(false)
  isParkingIncluded Boolean @default(false)
  beds      Int
  baths     Float
  squareFeet Int
  managerId String
  amenities  Amenity[]
  highlights Highlight[]
  photoUrls String[]
  propertyType PropertyType
  averageRating Float? @default(0)
  numberOfReviews Int? @default(0)
  locationId String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  location   Location @relation(fields: [locationId], references: [id])
  leases     Lease[]
  manager    Manager @relation(fields: [managerId], references: [id])
  applications Apllication[]
  tenants   Tenant[] @relation("TenantProperties")
  favoritedBy Tenant[] @relation("TenantFavorites")

  @@map("properties")
}

model Lease{
  id String @id @default(cuid())
  startDate DateTime
  endDate DateTime
  rent Float
  deposit Float
  propertyId String
  tenantId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  property Property @relation(fields: [propertyId], references: [id])
  tenant Tenant @relation(fields: [tenantId], references: [id])

  payments Payment[]

  @@map("leases")
}

model Apllication{
  id String @id @default(cuid())
  tenantId String
  propertyId String
  status ApplicationStatus
  applicationDate DateTime 

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  tenant Tenant @relation(fields: [tenantId], references: [id])
  property Property @relation(fields: [propertyId], references: [id])

  @@map("applications")
}

model Payment{
  id String @id @default(cuid())
  amountDue Float
  amountPaid Float
  dueDate DateTime
  paymentDate DateTime
  paymentStatus PaymentStatus
  leaseId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  lease Lease @relation(fields: [leaseId], references: [id])

  @@map("payments")
}

enum PropertyType {
  Rooms
  Tinyhouse
  Apartment
  Villa
  Townhouse
  Cottage
}

enum PaymentStatus {
  Pending
  Paid
  PartiallyPaid
  Overdue
}

enum ApplicationStatus {
  Pending
  Denied
  Approved
}

enum Highlight {
  HighSpeedInternetAccess
  WasherDryer
  AirConditioning
  Heating
  SmokeFree
  CableReady
  SatelliteTV
  DoubleVanities
  TubShower
  Intercom
  SprinklerSystem
  RecentlyRenovated
  CloseToTransit
  GreatView
  QuietNeighborhood
}

enum Amenity {
  WasherDryer
  AirConditioning
  Dishwasher
  HighSpeedInternet
  HardwoodFloors
  WalkInClosets
  Microwave
  Refrigerator
  Pool
  Gym
  Parking
  PetsAllowed
  WiFi
}